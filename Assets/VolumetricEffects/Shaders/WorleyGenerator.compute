#pragma kernel CSMain

RWTexture3D<float4> _Texture;
uniform float3 _TextureDimensions;

float3 hash33(float3 p3)
{
    float3 p = frac(p3 * float3(.1031, .11369, .13787));
    p += dot(p, p.yxz + 19.19);
    return -1.0 + 2.0 * frac(float3((p.x + p.y) * p.z, (p.x + p.z) * p.y, (p.y + p.z) * p.x));
}

// https://www.shadertoy.com/view/3d3fWN
float worley(float3 p, float scale)
{
    float3 id = floor(p * scale);
    float3 fd = frac(p * scale);

    float n = 0.;

    float minimalDist = 1.;


    for (float x = -1.; x <= 1.; x++)
    {
        for (float y = -1.; y <= 1.; y++)
        {
            for (float z = -1.; z <= 1.; z++)
            {
                float3 coord = float3(x, y, z);
                float3 rId = hash33(id + coord % scale) * 0.5 + 0.5;

                float3 r = coord + rId - fd;

                float d = dot(r, r);

                if (d < minimalDist)
                {
                    minimalDist = d;
                }
            } //z
        } //y
    } //x

    return 1.0 - minimalDist;
}

[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    _Texture[id.xyz] = worley(float3(id.xyz) / _TextureDimensions * 2 - 1, 4);
}
